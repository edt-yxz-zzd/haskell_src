type token =
  | TYPE of (Support.Error.info)
  | INERT of (Support.Error.info)
  | LAMBDA of (Support.Error.info)
  | TTOP of (Support.Error.info)
  | IF of (Support.Error.info)
  | THEN of (Support.Error.info)
  | ELSE of (Support.Error.info)
  | TRUE of (Support.Error.info)
  | FALSE of (Support.Error.info)
  | BOOL of (Support.Error.info)
  | FIX of (Support.Error.info)
  | LETREC of (Support.Error.info)
  | USTRING of (Support.Error.info)
  | UNIT of (Support.Error.info)
  | UUNIT of (Support.Error.info)
  | TIMESFLOAT of (Support.Error.info)
  | UFLOAT of (Support.Error.info)
  | LEQ of (Support.Error.info)
  | ALL of (Support.Error.info)
  | SUCC of (Support.Error.info)
  | PRED of (Support.Error.info)
  | ISZERO of (Support.Error.info)
  | NAT of (Support.Error.info)
  | SOME of (Support.Error.info)
  | LET of (Support.Error.info)
  | IN of (Support.Error.info)
  | AS of (Support.Error.info)
  | UCID of (string Support.Error.withinfo)
  | LCID of (string Support.Error.withinfo)
  | INTV of (int Support.Error.withinfo)
  | FLOATV of (float Support.Error.withinfo)
  | STRINGV of (string Support.Error.withinfo)
  | APOSTROPHE of (Support.Error.info)
  | DQUOTE of (Support.Error.info)
  | ARROW of (Support.Error.info)
  | BANG of (Support.Error.info)
  | BARGT of (Support.Error.info)
  | BARRCURLY of (Support.Error.info)
  | BARRSQUARE of (Support.Error.info)
  | COLON of (Support.Error.info)
  | COLONCOLON of (Support.Error.info)
  | COLONEQ of (Support.Error.info)
  | COLONHASH of (Support.Error.info)
  | COMMA of (Support.Error.info)
  | DARROW of (Support.Error.info)
  | DDARROW of (Support.Error.info)
  | DOT of (Support.Error.info)
  | EOF of (Support.Error.info)
  | EQ of (Support.Error.info)
  | EQEQ of (Support.Error.info)
  | EXISTS of (Support.Error.info)
  | GT of (Support.Error.info)
  | HASH of (Support.Error.info)
  | LCURLY of (Support.Error.info)
  | LCURLYBAR of (Support.Error.info)
  | LEFTARROW of (Support.Error.info)
  | LPAREN of (Support.Error.info)
  | LSQUARE of (Support.Error.info)
  | LSQUAREBAR of (Support.Error.info)
  | LT of (Support.Error.info)
  | RCURLY of (Support.Error.info)
  | RPAREN of (Support.Error.info)
  | RSQUARE of (Support.Error.info)
  | SEMI of (Support.Error.info)
  | SLASH of (Support.Error.info)
  | STAR of (Support.Error.info)
  | TRIANGLE of (Support.Error.info)
  | USCORE of (Support.Error.info)
  | VBAR of (Support.Error.info)

open Parsing;;
let _ = parse_error;;
# 7 "parser.mly"
open Support.Error
open Support.Pervasive
open Syntax
let rec addbinders tyT l = match l with
   [] -> tyT
 | (tyX,k)::rest -> TyAbs(tyX, k, addbinders tyT rest)
# 82 "parser.ml"
let yytransl_const = [|
    0|]

let yytransl_block = [|
  257 (* TYPE *);
  258 (* INERT *);
  259 (* LAMBDA *);
  260 (* TTOP *);
  261 (* IF *);
  262 (* THEN *);
  263 (* ELSE *);
  264 (* TRUE *);
  265 (* FALSE *);
  266 (* BOOL *);
  267 (* FIX *);
  268 (* LETREC *);
  269 (* USTRING *);
  270 (* UNIT *);
  271 (* UUNIT *);
  272 (* TIMESFLOAT *);
  273 (* UFLOAT *);
  274 (* LEQ *);
  275 (* ALL *);
  276 (* SUCC *);
  277 (* PRED *);
  278 (* ISZERO *);
  279 (* NAT *);
  280 (* SOME *);
  281 (* LET *);
  282 (* IN *);
  283 (* AS *);
  284 (* UCID *);
  285 (* LCID *);
  286 (* INTV *);
  287 (* FLOATV *);
  288 (* STRINGV *);
  289 (* APOSTROPHE *);
  290 (* DQUOTE *);
  291 (* ARROW *);
  292 (* BANG *);
  293 (* BARGT *);
  294 (* BARRCURLY *);
  295 (* BARRSQUARE *);
  296 (* COLON *);
  297 (* COLONCOLON *);
  298 (* COLONEQ *);
  299 (* COLONHASH *);
  300 (* COMMA *);
  301 (* DARROW *);
  302 (* DDARROW *);
  303 (* DOT *);
    0 (* EOF *);
  304 (* EQ *);
  305 (* EQEQ *);
  306 (* EXISTS *);
  307 (* GT *);
  308 (* HASH *);
  309 (* LCURLY *);
  310 (* LCURLYBAR *);
  311 (* LEFTARROW *);
  312 (* LPAREN *);
  313 (* LSQUARE *);
  314 (* LSQUAREBAR *);
  315 (* LT *);
  316 (* RCURLY *);
  317 (* RPAREN *);
  318 (* RSQUARE *);
  319 (* SEMI *);
  320 (* SLASH *);
  321 (* STAR *);
  322 (* TRIANGLE *);
  323 (* USCORE *);
  324 (* VBAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\005\000\005\000\
\007\000\007\000\007\000\008\000\008\000\010\000\010\000\011\000\
\013\000\013\000\013\000\012\000\012\000\006\000\006\000\006\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\015\000\015\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\021\000\021\000\022\000\022\000\023\000\023\000\018\000\
\018\000\024\000\024\000\025\000\025\000\014\000\014\000\016\000\
\016\000\019\000\019\000\026\000\026\000\004\000\004\000\004\000\
\004\000\000\000"

let yylen = "\002\000\
\001\000\003\000\001\000\002\000\002\000\007\000\002\000\002\000\
\003\000\003\000\001\000\003\000\001\000\001\000\003\000\001\000\
\000\000\002\000\002\000\003\000\001\000\001\000\005\000\005\000\
\003\000\001\000\001\000\001\000\003\000\001\000\001\000\001\000\
\001\000\007\000\004\000\003\000\001\000\001\000\006\000\006\000\
\006\000\006\000\006\000\008\000\005\000\010\000\001\000\002\000\
\002\000\003\000\004\000\002\000\002\000\002\000\003\000\004\000\
\001\000\001\000\001\000\003\000\001\000\001\000\001\000\001\000\
\008\000\000\000\001\000\001\000\003\000\003\000\001\000\000\000\
\001\000\001\000\003\000\003\000\001\000\001\000\003\000\000\000\
\002\000\002\000\001\000\000\000\003\000\000\000\002\000\002\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\058\000\059\000\000\000\
\000\000\062\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\064\000\063\000\061\000\001\000\000\000\000\000\090\000\
\000\000\003\000\000\000\011\000\000\000\000\000\000\000\000\000\
\000\000\000\000\057\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\
\000\000\071\000\000\000\067\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\028\000\030\000\
\031\000\032\000\000\000\033\000\026\000\000\000\000\000\000\000\
\022\000\083\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\087\000\000\000\
\000\000\000\000\078\000\088\000\016\000\000\000\000\000\007\000\
\008\000\000\000\000\000\000\000\060\000\000\000\000\000\055\000\
\002\000\009\000\010\000\012\000\000\000\000\000\000\000\000\000\
\000\000\000\000\077\000\000\000\073\000\000\000\000\000\056\000\
\000\000\082\000\018\000\019\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\081\000\085\000\000\000\000\000\
\089\000\000\000\070\000\000\000\069\000\015\000\051\000\000\000\
\000\000\000\000\000\000\000\000\029\000\000\000\025\000\036\000\
\045\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\079\000\020\000\000\000\000\000\000\000\035\000\000\000\000\000\
\076\000\075\000\039\000\040\000\041\000\000\000\042\000\000\000\
\043\000\000\000\000\000\024\000\023\000\000\000\000\000\000\000\
\006\000\000\000\000\000\044\000\000\000\065\000\034\000\000\000\
\046\000"

let yydgoto = "\002\000\
\024\000\025\000\058\000\050\000\054\000\123\000\027\000\028\000\
\029\000\063\000\100\000\101\000\086\000\102\000\081\000\097\000\
\082\000\124\000\083\000\030\000\059\000\060\000\061\000\125\000\
\126\000\051\000"

let yysindex = "\006\000\
\001\000\000\000\211\254\230\254\249\001\000\000\000\000\029\255\
\241\254\000\000\029\255\029\255\029\255\029\255\235\254\001\255\
\226\254\000\000\000\000\000\000\000\000\087\255\249\001\000\000\
\213\254\000\000\232\254\000\000\012\255\019\255\107\002\249\254\
\013\255\027\255\000\000\172\255\063\255\232\254\034\255\062\002\
\232\254\232\254\232\254\030\255\049\255\032\255\107\002\042\255\
\206\254\000\000\038\255\107\002\249\001\000\000\043\255\052\255\
\107\002\000\000\037\255\000\000\058\255\048\255\044\255\001\000\
\026\255\107\002\107\002\232\254\085\255\057\255\000\000\000\000\
\000\000\000\000\093\255\000\000\000\000\219\255\107\002\067\255\
\000\000\000\000\196\255\107\002\206\254\083\255\107\002\107\002\
\249\001\107\002\232\254\249\001\089\255\249\001\000\000\206\254\
\103\255\206\254\000\000\000\000\000\000\090\255\107\002\000\000\
\000\000\107\255\249\001\097\255\000\000\031\002\249\001\000\000\
\000\000\000\000\000\000\000\000\080\255\042\255\206\254\249\254\
\117\255\106\255\000\000\088\255\000\000\105\255\094\255\000\000\
\119\002\000\000\000\000\000\000\249\001\109\255\110\255\143\255\
\111\255\132\255\131\255\140\255\000\000\000\000\108\255\206\254\
\000\000\113\255\000\000\249\001\000\000\000\000\000\000\123\255\
\114\255\124\255\249\254\107\002\000\000\085\002\000\000\000\000\
\000\000\249\001\249\001\249\001\249\001\249\001\118\255\249\001\
\000\000\000\000\134\255\119\255\107\002\000\000\107\002\145\255\
\000\000\000\000\000\000\000\000\000\000\161\255\000\000\147\255\
\000\000\249\001\169\255\000\000\000\000\107\002\249\001\249\001\
\000\000\107\002\138\255\000\000\179\255\000\000\000\000\249\001\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\255\
\147\001\000\000\000\000\000\000\000\000\148\255\000\000\000\000\
\000\000\000\000\179\000\000\000\119\000\010\255\000\000\160\255\
\000\000\000\000\000\000\148\255\000\000\190\000\000\000\000\000\
\250\000\005\001\065\001\000\000\000\000\000\000\000\000\036\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\193\001\
\000\000\000\000\000\000\000\000\150\255\151\255\000\000\000\000\
\000\000\000\000\000\000\076\001\000\000\032\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\154\255\000\000\000\000\
\000\000\000\000\075\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\136\001\000\000\000\000\000\000\000\000\000\000\
\167\255\000\000\000\000\000\000\000\000\076\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\170\255\000\000\160\255\
\000\000\000\000\000\000\000\000\000\000\156\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\174\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\156\000\000\000\255\255\000\000\000\000\234\255\114\000\000\000\
\000\000\110\000\184\255\082\000\141\255\000\000\098\000\112\000\
\150\000\000\000\000\000\000\000\000\000\125\000\000\000\081\000\
\000\000\143\000"

let yytablesize = 943
let yytable = "\026\000\
\021\000\032\000\033\000\037\000\154\000\098\000\001\000\044\000\
\080\000\052\000\084\000\031\000\132\000\039\000\099\000\038\000\
\038\000\053\000\047\000\064\000\003\000\062\000\065\000\141\000\
\095\000\143\000\006\000\007\000\048\000\104\000\003\000\045\000\
\010\000\085\000\108\000\038\000\006\000\007\000\066\000\176\000\
\034\000\049\000\010\000\116\000\117\000\046\000\153\000\035\000\
\018\000\019\000\020\000\105\000\087\000\038\000\114\000\115\000\
\127\000\035\000\018\000\019\000\020\000\131\000\026\000\080\000\
\134\000\135\000\088\000\137\000\089\000\038\000\038\000\036\000\
\038\000\090\000\023\000\067\000\093\000\092\000\084\000\094\000\
\145\000\036\000\096\000\080\000\023\000\103\000\106\000\136\000\
\003\000\004\000\138\000\005\000\140\000\086\000\006\000\007\000\
\109\000\008\000\009\000\107\000\010\000\110\000\011\000\021\000\
\112\000\147\000\012\000\013\000\014\000\062\000\111\000\015\000\
\118\000\119\000\055\000\056\000\018\000\019\000\020\000\021\000\
\120\000\038\000\021\000\021\000\040\000\041\000\042\000\043\000\
\128\000\133\000\048\000\161\000\139\000\177\000\144\000\146\000\
\021\000\021\000\021\000\036\000\148\000\151\000\023\000\068\000\
\155\000\156\000\172\000\157\000\158\000\164\000\188\000\057\000\
\189\000\091\000\159\000\162\000\163\000\166\000\165\000\167\000\
\179\000\180\000\181\000\182\000\183\000\168\000\185\000\195\000\
\169\000\173\000\175\000\198\000\171\000\003\000\004\000\174\000\
\005\000\184\000\187\000\006\000\007\000\186\000\008\000\009\000\
\193\000\010\000\191\000\011\000\190\000\196\000\197\000\012\000\
\013\000\014\000\192\000\194\000\015\000\199\000\201\000\070\000\
\056\000\018\000\019\000\020\000\200\000\071\000\017\000\066\000\
\072\000\068\000\073\000\014\000\074\000\072\000\084\000\074\000\
\080\000\017\000\076\000\113\000\150\000\069\000\070\000\077\000\
\036\000\170\000\160\000\023\000\071\000\152\000\129\000\072\000\
\130\000\073\000\149\000\074\000\057\000\075\000\178\000\142\000\
\000\000\076\000\121\000\000\000\000\000\000\000\077\000\122\000\
\078\000\000\000\000\000\079\000\000\000\000\000\000\000\000\000\
\000\000\000\000\003\000\004\000\000\000\005\000\000\000\000\000\
\006\000\007\000\000\000\008\000\009\000\000\000\010\000\078\000\
\011\000\000\000\079\000\000\000\012\000\013\000\014\000\000\000\
\000\000\015\000\000\000\000\000\016\000\017\000\018\000\019\000\
\020\000\027\000\000\000\027\000\000\000\027\000\027\000\027\000\
\027\000\027\000\000\000\000\000\027\000\027\000\027\000\000\000\
\027\000\000\000\000\000\000\000\000\000\022\000\027\000\000\000\
\023\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\027\000\037\000\000\000\027\000\027\000\
\037\000\037\000\037\000\037\000\027\000\000\000\000\000\027\000\
\037\000\000\000\000\000\027\000\027\000\027\000\027\000\000\000\
\000\000\000\000\000\000\000\000\037\000\037\000\000\000\037\000\
\037\000\037\000\037\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\037\000\000\000\
\013\000\037\000\037\000\000\000\013\000\013\000\013\000\013\000\
\000\000\000\000\000\000\037\000\013\000\000\000\037\000\037\000\
\037\000\037\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\000\000\000\000\000\013\000\013\000\013\000\013\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\013\000\000\000\000\000\013\000\000\000\000\000\
\000\000\000\000\000\000\013\000\000\000\000\000\013\000\013\000\
\000\000\000\000\013\000\013\000\047\000\013\000\000\000\000\000\
\047\000\047\000\047\000\047\000\000\000\000\000\000\000\049\000\
\047\000\000\000\000\000\049\000\049\000\049\000\049\000\000\000\
\000\000\000\000\000\000\049\000\047\000\000\000\000\000\047\000\
\047\000\047\000\047\000\000\000\000\000\000\000\000\000\049\000\
\000\000\000\000\049\000\049\000\049\000\049\000\047\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\047\000\
\000\000\049\000\047\000\047\000\000\000\000\000\047\000\047\000\
\000\000\047\000\049\000\000\000\000\000\049\000\049\000\000\000\
\000\000\049\000\049\000\052\000\049\000\000\000\000\000\052\000\
\052\000\052\000\052\000\000\000\000\000\000\000\053\000\052\000\
\000\000\000\000\053\000\053\000\053\000\053\000\000\000\000\000\
\000\000\000\000\053\000\052\000\000\000\000\000\052\000\052\000\
\052\000\052\000\000\000\000\000\000\000\000\000\053\000\000\000\
\000\000\053\000\053\000\053\000\053\000\052\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\052\000\000\000\
\053\000\052\000\052\000\000\000\000\000\052\000\052\000\000\000\
\052\000\053\000\000\000\000\000\053\000\053\000\000\000\000\000\
\053\000\053\000\054\000\053\000\000\000\000\000\054\000\054\000\
\054\000\054\000\000\000\000\000\000\000\048\000\054\000\000\000\
\000\000\048\000\048\000\048\000\048\000\000\000\000\000\000\000\
\000\000\048\000\054\000\000\000\000\000\054\000\054\000\054\000\
\054\000\000\000\000\000\000\000\000\000\048\000\000\000\000\000\
\048\000\048\000\048\000\048\000\054\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\054\000\000\000\048\000\
\054\000\054\000\000\000\000\000\054\000\054\000\000\000\054\000\
\048\000\000\000\000\000\048\000\048\000\000\000\000\000\048\000\
\048\000\050\000\048\000\000\000\000\000\050\000\050\000\050\000\
\050\000\000\000\000\000\000\000\057\000\050\000\000\000\000\000\
\000\000\000\000\057\000\057\000\000\000\000\000\000\000\000\000\
\057\000\050\000\000\000\000\000\050\000\050\000\050\000\050\000\
\000\000\000\000\000\000\000\000\000\000\057\000\000\000\057\000\
\057\000\057\000\057\000\050\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\050\000\000\000\000\000\050\000\
\050\000\057\000\057\000\050\000\050\000\000\000\050\000\057\000\
\057\000\057\000\057\000\057\000\000\000\000\000\057\000\000\000\
\000\000\057\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\057\000\000\000\057\000\057\000\057\000\
\057\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\057\000\000\000\000\000\057\000\
\000\000\000\000\000\000\000\000\000\000\057\000\000\000\000\000\
\057\000\057\000\003\000\004\000\057\000\005\000\000\000\000\000\
\006\000\007\000\000\000\008\000\009\000\000\000\010\000\000\000\
\011\000\000\000\000\000\000\000\012\000\013\000\014\000\000\000\
\000\000\015\000\000\000\000\000\000\000\035\000\018\000\019\000\
\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\003\000\004\000\000\000\005\000\000\000\000\000\006\000\007\000\
\000\000\008\000\009\000\000\000\010\000\036\000\011\000\000\000\
\023\000\000\000\012\000\013\000\014\000\000\000\000\000\015\000\
\000\000\000\000\000\000\056\000\018\000\019\000\020\000\003\000\
\000\000\000\000\000\000\000\000\000\000\006\000\007\000\000\000\
\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\036\000\000\000\000\000\023\000\069\000\
\070\000\000\000\035\000\018\000\019\000\020\000\071\000\000\000\
\000\000\072\000\000\000\073\000\000\000\074\000\000\000\075\000\
\000\000\000\000\000\000\076\000\065\000\069\000\070\000\000\000\
\077\000\122\000\036\000\000\000\071\000\023\000\000\000\072\000\
\000\000\073\000\070\000\074\000\000\000\075\000\000\000\000\000\
\071\000\076\000\000\000\072\000\000\000\073\000\077\000\074\000\
\000\000\078\000\000\000\000\000\079\000\076\000\000\000\000\000\
\000\000\000\000\077\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\078\000\
\000\000\000\000\079\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\078\000\000\000\000\000\079\000"

let yycheck = "\001\000\
\000\000\028\001\029\001\005\000\120\000\056\001\001\000\029\001\
\031\000\040\001\018\001\057\001\085\000\029\001\065\001\006\001\
\007\001\048\001\018\001\063\001\002\001\023\000\047\001\096\000\
\047\000\098\000\008\001\009\001\028\001\052\000\002\001\053\001\
\014\001\041\001\057\000\026\001\008\001\009\001\027\001\155\000\
\067\001\041\001\014\001\066\000\067\000\067\001\119\000\029\001\
\030\001\031\001\032\001\053\000\040\001\044\001\029\001\030\001\
\079\000\029\001\030\001\031\001\032\001\084\000\064\000\028\001\
\087\000\088\000\040\001\090\000\006\001\060\001\061\001\053\001\
\063\001\040\001\056\001\057\001\028\001\048\001\048\001\048\001\
\103\000\053\001\041\001\048\001\056\001\048\001\044\001\089\000\
\002\001\003\001\092\000\005\001\094\000\063\001\008\001\009\001\
\060\001\011\001\012\001\048\001\014\001\044\001\016\001\028\001\
\061\001\107\000\020\001\021\001\022\001\111\000\063\001\025\001\
\028\001\057\001\028\001\029\001\030\001\031\001\032\001\044\001\
\028\001\008\000\047\001\048\001\011\000\012\000\013\000\014\000\
\062\001\047\001\028\001\133\000\044\001\156\000\045\001\029\001\
\061\001\062\001\063\001\053\001\044\001\062\001\056\001\030\000\
\028\001\040\001\148\000\060\001\044\001\007\001\173\000\065\001\
\175\000\040\000\061\001\047\001\047\001\026\001\048\001\029\001\
\162\000\163\000\164\000\165\000\166\000\026\001\168\000\190\000\
\061\001\047\001\047\001\194\000\060\001\002\001\003\001\062\001\
\005\001\060\001\060\001\008\001\009\001\048\001\011\001\012\001\
\186\000\014\001\026\001\016\001\044\001\191\000\192\000\020\001\
\021\001\022\001\048\001\027\001\025\001\060\001\200\000\004\001\
\029\001\030\001\031\001\032\001\026\001\010\001\047\001\060\001\
\013\001\060\001\015\001\061\001\017\001\060\001\048\001\060\001\
\047\001\044\001\023\001\064\000\111\000\003\001\004\001\028\001\
\053\001\144\000\129\000\056\001\010\001\118\000\035\001\013\001\
\083\000\015\001\110\000\017\001\065\001\019\001\158\000\097\000\
\255\255\023\001\024\001\255\255\255\255\255\255\028\001\029\001\
\053\001\255\255\255\255\056\001\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\255\255\005\001\255\255\255\255\
\008\001\009\001\255\255\011\001\012\001\255\255\014\001\053\001\
\016\001\255\255\056\001\255\255\020\001\021\001\022\001\255\255\
\255\255\025\001\255\255\255\255\028\001\029\001\030\001\031\001\
\032\001\002\001\255\255\004\001\255\255\006\001\007\001\008\001\
\009\001\010\001\255\255\255\255\013\001\014\001\015\001\255\255\
\017\001\255\255\255\255\255\255\255\255\053\001\023\001\255\255\
\056\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\255\255\255\255\035\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\044\001\002\001\255\255\047\001\048\001\
\006\001\007\001\008\001\009\001\053\001\255\255\255\255\056\001\
\014\001\255\255\255\255\060\001\061\001\062\001\063\001\255\255\
\255\255\255\255\255\255\255\255\026\001\027\001\255\255\029\001\
\030\001\031\001\032\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\044\001\255\255\
\002\001\047\001\048\001\255\255\006\001\007\001\008\001\009\001\
\255\255\255\255\255\255\057\001\014\001\255\255\060\001\061\001\
\062\001\063\001\255\255\255\255\255\255\255\255\255\255\255\255\
\026\001\255\255\255\255\029\001\030\001\031\001\032\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\044\001\255\255\255\255\047\001\255\255\255\255\
\255\255\255\255\255\255\053\001\255\255\255\255\056\001\057\001\
\255\255\255\255\060\001\061\001\002\001\063\001\255\255\255\255\
\006\001\007\001\008\001\009\001\255\255\255\255\255\255\002\001\
\014\001\255\255\255\255\006\001\007\001\008\001\009\001\255\255\
\255\255\255\255\255\255\014\001\026\001\255\255\255\255\029\001\
\030\001\031\001\032\001\255\255\255\255\255\255\255\255\026\001\
\255\255\255\255\029\001\030\001\031\001\032\001\044\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\053\001\
\255\255\044\001\056\001\057\001\255\255\255\255\060\001\061\001\
\255\255\063\001\053\001\255\255\255\255\056\001\057\001\255\255\
\255\255\060\001\061\001\002\001\063\001\255\255\255\255\006\001\
\007\001\008\001\009\001\255\255\255\255\255\255\002\001\014\001\
\255\255\255\255\006\001\007\001\008\001\009\001\255\255\255\255\
\255\255\255\255\014\001\026\001\255\255\255\255\029\001\030\001\
\031\001\032\001\255\255\255\255\255\255\255\255\026\001\255\255\
\255\255\029\001\030\001\031\001\032\001\044\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\053\001\255\255\
\044\001\056\001\057\001\255\255\255\255\060\001\061\001\255\255\
\063\001\053\001\255\255\255\255\056\001\057\001\255\255\255\255\
\060\001\061\001\002\001\063\001\255\255\255\255\006\001\007\001\
\008\001\009\001\255\255\255\255\255\255\002\001\014\001\255\255\
\255\255\006\001\007\001\008\001\009\001\255\255\255\255\255\255\
\255\255\014\001\026\001\255\255\255\255\029\001\030\001\031\001\
\032\001\255\255\255\255\255\255\255\255\026\001\255\255\255\255\
\029\001\030\001\031\001\032\001\044\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\053\001\255\255\044\001\
\056\001\057\001\255\255\255\255\060\001\061\001\255\255\063\001\
\053\001\255\255\255\255\056\001\057\001\255\255\255\255\060\001\
\061\001\002\001\063\001\255\255\255\255\006\001\007\001\008\001\
\009\001\255\255\255\255\255\255\002\001\014\001\255\255\255\255\
\255\255\255\255\008\001\009\001\255\255\255\255\255\255\255\255\
\014\001\026\001\255\255\255\255\029\001\030\001\031\001\032\001\
\255\255\255\255\255\255\255\255\255\255\027\001\255\255\029\001\
\030\001\031\001\032\001\044\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\053\001\255\255\255\255\056\001\
\057\001\047\001\002\001\060\001\061\001\255\255\063\001\053\001\
\008\001\009\001\056\001\057\001\255\255\255\255\014\001\255\255\
\255\255\063\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\027\001\255\255\029\001\030\001\031\001\
\032\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\044\001\255\255\255\255\047\001\
\255\255\255\255\255\255\255\255\255\255\053\001\255\255\255\255\
\056\001\057\001\002\001\003\001\060\001\005\001\255\255\255\255\
\008\001\009\001\255\255\011\001\012\001\255\255\014\001\255\255\
\016\001\255\255\255\255\255\255\020\001\021\001\022\001\255\255\
\255\255\025\001\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\002\001\003\001\255\255\005\001\255\255\255\255\008\001\009\001\
\255\255\011\001\012\001\255\255\014\001\053\001\016\001\255\255\
\056\001\255\255\020\001\021\001\022\001\255\255\255\255\025\001\
\255\255\255\255\255\255\029\001\030\001\031\001\032\001\002\001\
\255\255\255\255\255\255\255\255\255\255\008\001\009\001\255\255\
\255\255\255\255\255\255\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\053\001\255\255\255\255\056\001\003\001\
\004\001\255\255\029\001\030\001\031\001\032\001\010\001\255\255\
\255\255\013\001\255\255\015\001\255\255\017\001\255\255\019\001\
\255\255\255\255\255\255\023\001\047\001\003\001\004\001\255\255\
\028\001\029\001\053\001\255\255\010\001\056\001\255\255\013\001\
\255\255\015\001\004\001\017\001\255\255\019\001\255\255\255\255\
\010\001\023\001\255\255\013\001\255\255\015\001\028\001\017\001\
\255\255\053\001\255\255\255\255\056\001\023\001\255\255\255\255\
\255\255\255\255\028\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\053\001\
\255\255\255\255\056\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\053\001\255\255\255\255\056\001"

let yynames_const = "\
  "

let yynames_block = "\
  TYPE\000\
  INERT\000\
  LAMBDA\000\
  TTOP\000\
  IF\000\
  THEN\000\
  ELSE\000\
  TRUE\000\
  FALSE\000\
  BOOL\000\
  FIX\000\
  LETREC\000\
  USTRING\000\
  UNIT\000\
  UUNIT\000\
  TIMESFLOAT\000\
  UFLOAT\000\
  LEQ\000\
  ALL\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  NAT\000\
  SOME\000\
  LET\000\
  IN\000\
  AS\000\
  UCID\000\
  LCID\000\
  INTV\000\
  FLOATV\000\
  STRINGV\000\
  APOSTROPHE\000\
  DQUOTE\000\
  ARROW\000\
  BANG\000\
  BARGT\000\
  BARRCURLY\000\
  BARRSQUARE\000\
  COLON\000\
  COLONCOLON\000\
  COLONEQ\000\
  COLONHASH\000\
  COMMA\000\
  DARROW\000\
  DDARROW\000\
  DOT\000\
  EOF\000\
  EQ\000\
  EQEQ\000\
  EXISTS\000\
  GT\000\
  HASH\000\
  LCURLY\000\
  LCURLYBAR\000\
  LEFTARROW\000\
  LPAREN\000\
  LSQUARE\000\
  LSQUAREBAR\000\
  LT\000\
  RCURLY\000\
  RPAREN\000\
  RSQUARE\000\
  SEMI\000\
  SLASH\000\
  STAR\000\
  TRIANGLE\000\
  USCORE\000\
  VBAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 128 "parser.mly"
      ( fun ctx -> [],ctx )
# 605 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  Syntax.context -> (Syntax.command list * Syntax.context) ) in
    Obj.repr(
# 130 "parser.mly"
      ( fun ctx ->
          let cmd,ctx = _1 ctx in
          let cmds,ctx = _3 ctx in
          cmd::cmds,ctx )
# 617 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 138 "parser.mly"
      ( fun ctx -> (let t = _1 ctx in Eval(tmInfo t,t)),ctx )
# 624 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'TyBinder) in
    Obj.repr(
# 140 "parser.mly"
      ( fun ctx -> ((Bind(_1.i, _1.v, _2 ctx)), addname ctx _1.v) )
# 632 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Binder) in
    Obj.repr(
# 142 "parser.mly"
      ( fun ctx -> ((Bind(_1.i,_1.v,_2 ctx)), addname ctx _1.v) )
# 640 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string Support.Error.withinfo) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 144 "parser.mly"
     ( fun ctx ->
         let ctx1 = addname ctx _2.v in
         let ctx2 = addname ctx1 _4.v in
         (SomeBind(_1,_2.v,_4.v,_7 ctx), ctx2) )
# 656 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 152 "parser.mly"
      ( fun ctx -> VarBind (_2 ctx))
# 664 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 154 "parser.mly"
      ( fun ctx -> TmAbbBind(_2 ctx, None) )
# 672 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 158 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, _3.v) )
# 682 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 161 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, string_of_int _3.v) )
# 692 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AscribeTerm) in
    Obj.repr(
# 164 "parser.mly"
      ( _1 )
# 699 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ATerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 168 "parser.mly"
      ( fun ctx -> TmAscribe(_2, _1 ctx, _3 ctx) )
# 708 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 170 "parser.mly"
      ( _1 )
# 715 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 174 "parser.mly"
      ( _1 )
# 722 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'TermSeq) in
    Obj.repr(
# 176 "parser.mly"
      ( fun ctx ->
          TmApp(_2, TmAbs(_2, "_", TyUnit, _3 (addname ctx "_")), _1 ctx) )
# 732 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowKind) in
    Obj.repr(
# 182 "parser.mly"
      ( _1 )
# 739 "parser.ml"
               : 'Kind))
; (fun __caml_parser_env ->
    Obj.repr(
# 186 "parser.mly"
      ( fun ctx -> TyTop)
# 745 "parser.ml"
               : 'OType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 188 "parser.mly"
      ( _2 )
# 753 "parser.ml"
               : 'OType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Kind) in
    Obj.repr(
# 190 "parser.mly"
      ( fun ctx -> maketop (_2 ctx) )
# 761 "parser.ml"
               : 'OType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AKind) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowKind) in
    Obj.repr(
# 193 "parser.mly"
                            ( fun ctx -> KnArr(_1 ctx, _3 ctx) )
# 770 "parser.ml"
               : 'ArrowKind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AKind) in
    Obj.repr(
# 195 "parser.mly"
           ( _1 )
# 777 "parser.ml"
               : 'ArrowKind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 200 "parser.mly"
                ( _1 )
# 784 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'OType) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 202 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TyAll(_2.v,_3 ctx,_5 ctx1) )
# 797 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'OKind) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 206 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TyAbs(_2.v, _3 ctx, _5 ctx1) )
# 810 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 213 "parser.mly"
           ( _2 )
# 819 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 215 "parser.mly"
      ( fun ctx ->
          if isnamebound ctx _1.v then
            TyVar(name2index _1.i ctx _1.v, ctxlength ctx)
          else 
            TyId(_1.v) )
# 830 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 221 "parser.mly"
      ( fun ctx -> TyTop )
# 837 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 223 "parser.mly"
      ( fun ctx -> TyBool )
# 844 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 225 "parser.mly"
      ( fun ctx ->
          TyRecord(_2 ctx 1) )
# 854 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 228 "parser.mly"
      ( fun ctx -> TyString )
# 861 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 230 "parser.mly"
      ( fun ctx -> TyUnit )
# 868 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 232 "parser.mly"
      ( fun ctx -> TyFloat )
# 875 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 234 "parser.mly"
      ( fun ctx -> TyNat )
# 882 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'OType) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 236 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _3.v in
          TySome(_3.v, _4 ctx, _6 ctx1) )
# 897 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Kind) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 240 "parser.mly"
      ( fun ctx -> maketop (_3 ctx) )
# 907 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AppType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 246 "parser.mly"
     ( fun ctx -> TyArr(_1 ctx, _3 ctx) )
# 916 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AppType) in
    Obj.repr(
# 248 "parser.mly"
            ( _1 )
# 923 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 252 "parser.mly"
      ( _1 )
# 930 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 254 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TmAbs(_1, _2.v, _4 ctx, _6 ctx1) )
# 944 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 258 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx "_" in
          TmAbs(_1, "_", _4 ctx, _6 ctx1) )
# 958 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 262 "parser.mly"
      ( fun ctx -> TmIf(_1, _2 ctx, _4 ctx, _6 ctx) )
# 970 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 264 "parser.mly"
      ( fun ctx -> TmLet(_1, _2.v, _4 ctx, _6 (addname ctx _2.v)) )
# 982 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 266 "parser.mly"
      ( fun ctx -> TmLet(_1, "_", _4 ctx, _6 (addname ctx "_")) )
# 994 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 268 "parser.mly"
      ( fun ctx -> 
          let ctx1 = addname ctx _2.v in 
          TmLet(_1, _2.v, TmFix(_1, TmAbs(_1, _2.v, _4 ctx, _6 ctx1)),
                _8 ctx1) )
# 1011 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'OType) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 273 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TmTAbs(_1,_2.v,_3 ctx,_5 ctx1) )
# 1024 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 8 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string Support.Error.withinfo) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 277 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _3.v in
          let ctx2 = addname ctx1 _5.v in
          TmUnpack(_1,_3.v,_5.v,_8 ctx,_10 ctx2) )
# 1043 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 284 "parser.mly"
      ( _1 )
# 1050 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 286 "parser.mly"
      ( fun ctx ->
          let e1 = _1 ctx in
          let e2 = _2 ctx in
          TmApp(tmInfo e1,e1,e2) )
# 1061 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 291 "parser.mly"
      ( fun ctx ->
          TmFix(_1, _2 ctx) )
# 1070 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 294 "parser.mly"
      ( fun ctx -> TmTimesfloat(_1, _2 ctx, _3 ctx) )
# 1079 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 296 "parser.mly"
      ( fun ctx ->
          let t1 = _1 ctx in
          let t2 = _3 ctx in
          TmTApp(tmInfo t1,t1,t2) )
# 1092 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 301 "parser.mly"
      ( fun ctx -> TmSucc(_1, _2 ctx) )
# 1100 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 303 "parser.mly"
      ( fun ctx -> TmPred(_1, _2 ctx) )
# 1108 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 305 "parser.mly"
      ( fun ctx -> TmIsZero(_1, _2 ctx) )
# 1116 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TermSeq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 310 "parser.mly"
      ( _2 )
# 1125 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 312 "parser.mly"
      ( fun ctx -> TmInert(_1, _3 ctx) )
# 1135 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 314 "parser.mly"
      ( fun ctx ->
          TmVar(_1.i, name2index _1.i ctx _1.v, ctxlength ctx) )
# 1143 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 317 "parser.mly"
      ( fun ctx -> TmTrue(_1) )
# 1150 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 319 "parser.mly"
      ( fun ctx -> TmFalse(_1) )
# 1157 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Fields) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 321 "parser.mly"
      ( fun ctx ->
          TmRecord(_1, _2 ctx 1) )
# 1167 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 324 "parser.mly"
      ( fun ctx -> TmString(_1.i, _1.v) )
# 1174 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 326 "parser.mly"
      ( fun ctx -> TmUnit(_1) )
# 1181 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float Support.Error.withinfo) in
    Obj.repr(
# 328 "parser.mly"
      ( fun ctx -> TmFloat(_1.i, _1.v) )
# 1188 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 330 "parser.mly"
      ( fun ctx ->
          let rec f n = match n with
              0 -> TmZero(_1.i)
            | n -> TmSucc(_1.i, f (n-1))
          in f _1.v )
# 1199 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'Type) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'Term) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 336 "parser.mly"
      ( fun ctx ->
          TmPack(_1,_3 ctx,_5 ctx,_8 ctx) )
# 1214 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 341 "parser.mly"
      ( fun ctx i -> [] )
# 1220 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 343 "parser.mly"
      ( _1 )
# 1227 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Field) in
    Obj.repr(
# 347 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1234 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Field) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 349 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1243 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 353 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1252 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 355 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1259 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    Obj.repr(
# 359 "parser.mly"
      ( fun ctx i -> [] )
# 1265 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 361 "parser.mly"
      ( _1 )
# 1272 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'FieldType) in
    Obj.repr(
# 365 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1279 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'FieldType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 367 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1288 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 371 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1297 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 373 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1304 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 376 "parser.mly"
         ( fun ctx -> KnStar )
# 1311 "parser.ml"
               : 'AKind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Kind) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 377 "parser.mly"
                        ( _2 )
# 1320 "parser.ml"
               : 'AKind))
; (fun __caml_parser_env ->
    Obj.repr(
# 381 "parser.mly"
     ( fun ctx -> KnStar)
# 1326 "parser.ml"
               : 'OKind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Kind) in
    Obj.repr(
# 383 "parser.mly"
     ( _2 )
# 1334 "parser.ml"
               : 'OKind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'AppType) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 386 "parser.mly"
                  ( fun ctx -> TyApp(_1 ctx,_2 ctx) )
# 1342 "parser.ml"
               : 'AppType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 387 "parser.mly"
          ( _1 )
# 1349 "parser.ml"
               : 'AppType))
; (fun __caml_parser_env ->
    Obj.repr(
# 392 "parser.mly"
      ( fun b ctx -> (b, ctx) )
# 1355 "parser.ml"
               : 'TyAbbArgs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'OKind) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'TyAbbArgs) in
    Obj.repr(
# 394 "parser.mly"
      ( fun b ctx ->
          let ctx' = (addname ctx _1.v) in
          _3 (b@[(_1.v,_2 ctx)]) ctx' )
# 1366 "parser.ml"
               : 'TyAbbArgs))
; (fun __caml_parser_env ->
    Obj.repr(
# 400 "parser.mly"
      ( fun ctx -> TyVarBind(TyTop) )
# 1372 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 402 "parser.mly"
      ( fun ctx -> TyVarBind(_2 ctx) )
# 1380 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Kind) in
    Obj.repr(
# 404 "parser.mly"
      ( fun ctx -> TyVarBind(maketop (_2 ctx)) )
# 1388 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'TyAbbArgs) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 406 "parser.mly"
      ( fun ctx ->
          let (b,ctx') = _1 [] ctx in
          TyAbbBind(addbinders (_3 ctx') b, None) )
# 1399 "parser.ml"
               : 'TyBinder))
(* Entry toplevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let toplevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf :  Syntax.context -> (Syntax.command list * Syntax.context) )
